create extension cube;
create extension earthdistance;
DROP table if exists cyclistic;
CREATE table cyclistic(
	row_number_ int,
	ride_id varchar,
	rideable_type varchar,
	started_at timestamp,
	ended_at timestamp,
	start_station_name varchar,
	start_station_id varchar,
	end_station_name varchar,
	end_station_id varchar,
	start_lat double precision,
	start_lng double precision,
	end_lat double precision,
	end_lng double precision,
	member_casual varchar
);

COPY cyclistic
FROM 'C:\Users\***\Cyclistic\Data\Processed Data\cyclistic.csv'
DELIMITER ','
CSV HEADER;

SELECT * FROM cyclistic LIMIT 100;

--Detecting Duplicates
SELECT ride_id, rideable_type, started_at, ended_at, start_station_name, end_station_name,
	start_station_id, end_station_id, start_lat, start_lng, end_lat, end_lng, member_casual, count(*) as records
	FROM cyclistic
	GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13
	HAVING count(*) > 1;

--Checking for the number of nulls for each column
select key as column, count(*) as null_values
from cyclistic t
cross join jsonb_each_text(to_jsonb(t))
where value is null
group by key;

--Since the number of nulls in end_lat and end_lng is relatively low
--we will drop the corresponding rows and fill the other nulls with 'unknown'.
--we will also add more columns such as the ride_duration, date, day, month, year, day_of_week, hour
DROP table if exists cyclistic_;
CREATE TABLE cyclistic_ AS (
	SELECT ride_id, rideable_type, started_at, ended_at,
	started_at::DATE as date,
	date_part('hour',started_at) as hour,
	extract(dow from started_at) as dow,
	CASE WHEN extract(dow from started_at) = 0 THEN 'Monday'
	WHEN extract(dow from started_at) = 1 THEN 'Tuesday'
	WHEN extract(dow from started_at) = 2 THEN 'Wednesday'
	WHEN extract(dow from started_at) = 3 THEN 'Thursday'
	WHEN extract(dow from started_at) = 4 THEN 'Friday'
	WHEN extract(dow from started_at) = 5 THEN 'Saturday'
	WHEN extract(dow from started_at) = 6 THEN 'Sunday' END AS day_of_week,
	date_part('day',started_at) as day,
	date_part('month',started_at) as month,
	date_part('year',started_at) as year,
	age(ended_at,started_at) as ride_duration,
	CASE WHEN start_station_name is null THEN 'Unknown' ELSE start_station_name END as start_station_name,
	CASE WHEN start_station_id is null THEN 'Unknown' ELSE start_station_id END as start_station_is,
	CASE WHEN end_station_name is null THEN 'Unknown' ELSE end_station_name END as end_station_name,
	CASE WHEN end_station_id is null THEN 'Unknown' ELSE end_station_id END as end_station_id,
	start_lat, start_lng, end_lat, end_lng,
	(point(start_lng,start_lat) <@> point(end_lng,end_lat)) as distance,
	member_casual
	FROM cyclistic
	WHERE end_lat is not null
	AND end_lng is not null
);
SELECT * FROM cyclistic_ LIMIT 100;

--Now that we have cleaned the data, lets answer some questions.

--Q1: What's the most used type of bikes used by members and caual riders?
SELECT rideable_type, member_casual, count(*) as count
FROM cyclistic_
GROUP BY 1,2
ORDER BY 1,2,3;

--Q2:How the number of ride is affected by the time for members and casual ridersr?
SELECT member_casual, date, hour, day_of_week, day, month, year, count(ride_id) as count
FROM cyclistic_
GROUP BY 1,2,3,4,5,6,7;

--Q2_1:How much are the bikes used by members and casual riders during th day
--and what are the top 3 hours that the bikes are most used at?
SELECT member_casual, hour, count(ride_id) as count
FROM cyclistic_
GROUP BY 1,2;

SELECT member_casual, hour, count(ride_id) as count
FROM cyclistic_
WHERE member_casual = 'casual'
GROUP BY 1,2
ORDER BY count(ride_id)
LIMIT 3;

SELECT member_casual, hour, count(ride_id) as count
FROM cyclistic_
WHERE member_casual = 'member'
GROUP BY 1,2
ORDER BY count(ride_id)
LIMIT 3;

--Q2_2: How much are the bikes used through the days of the week?
SELECT member_casual, day_of_week, dow, count(ride_id) as count
FROM cyclistic_
GROUP BY 1,2,3
ORDER BY dow ASC;

--Q2_3: How much did the members and casul riders use the bikes during the last 12 months?
SELECT member_casual, month, year, count(ride_id) as count
FROM cyclistic_
GROUP BY 1,2,3
ORDER BY 1,3,2;

--Q3: What are the average distances covered by members and casual users and what are the most popular routes among them?
SELECT member_casual, avg(distance) average_distance
FROM cyclistic_
GROUP BY 1;

--Members popular routes
SELECT start_station_name, end_station_name , max(route_freq) as route_freq,
min(start_lat) as start_lat, min(start_lng) as start_lng, min(end_lat) as end_lat, min(end_lng) as end_lng
FROM(
SELECT member_casual, start_lat, start_lng, end_lat, end_lng,
row_number() over(partition by start_station_name, end_station_name) as route_freq,
	   start_station_name, end_station_name
FROM cyclistic_
WHERE start_station_name != 'Unknown' and end_station_name !='Unknown' and member_casual = 'member'
order by route_freq DESC)a
GROUP BY 1,2
order by 3 DESC
LIMIT 100;

--Casual riders popular routes
SELECT start_station_name, end_station_name , max(route_freq) as route_freq,
min(start_lat) as start_lat, min(start_lng) as start_lng, min(end_lat) as end_lat, min(end_lng) as end_lng
FROM(
SELECT member_casual, start_lat, start_lng, end_lat, end_lng,
row_number() over(partition by start_station_name, end_station_name) as route_freq,
	   start_station_name, end_station_name
FROM cyclistic_
WHERE start_station_name != 'Unknown' and end_station_name !='Unknown' and member_casual = 'casual'
order by route_freq DESC)a
GROUP BY 1,2
order by 3 DESC
LIMIT 100;










